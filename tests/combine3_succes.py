import asyncio
from panoramisk.manager import Manager

# === AMI Configuration (C·∫ßn ch√≠nh x√°c) ===
AMI_HOST = '127.0.0.1'
AMI_PORT = 5038
AMI_USERNAME = 'hx'
AMI_SECRET = '123'

# === Fall Alert Settings ===
# üîë ƒê√É TH√äM 6004 V√ÄO DANH S√ÅCH C·∫¶N TEST
EXTENSIONS = ['6001', '6002', '6003', '6004'] 
ALERT_MESSAGE = "‚ö†Ô∏è C·∫£nh b√°o: Ph√°t hi·ªán ng√£ t·∫°i v·ªã tr√≠ hi·ªán t·∫°i!"
CALLER_ID = "FallAlert"

# === AMI Manager Instance ===
manager = Manager(
    host=AMI_HOST,
    port=AMI_PORT,
    username=AMI_USERNAME,
    secret=AMI_SECRET
)

# === Send Call (Tr·ªè ƒë·∫øn 9999 v√† Timeout 20s) ===
async def originate_call(ext: str):
    """
    T·∫°o cu·ªôc g·ªçi c·∫£nh b√°o gi·∫£ 20 gi√¢y.
    Tr·ªè ƒë·∫øn Exten 9999 (ƒëi·ªÉm tho√°t) v√† d√πng Timeout 20000ms ƒë·ªÉ ki·ªÉm so√°t th·ªùi gian ƒë·ªï chu√¥ng.
    """
    try:
        response = await manager.send_action({
            'Action': 'Originate',
            'Channel': f'PJSIP/{ext}',
            'Context': 'internal',
            'Exten': '9999',         # Exten 9999 l√† ƒëi·ªÉm tho√°t s·∫°ch trong extensions.ael
            'Priority': 1,
            'CallerID': f'{CALLER_ID} <{ext}>',
            'Timeout': 20000,        # ƒê·∫∑t Timeout 20 gi√¢y (20000ms)
            'Async': 'true'
        })
        print(f"[üìû CALL] ‚Üí {ext} | Status: {response.get('Response')} - {response.get('Message')}")
    except Exception as e:
        print(f"[üìû CALL] ‚Üí {ext} | ‚ùå Error: {e}")

# === Send Message (Kh·∫Øc ph·ª•c l·ªói c√∫ ph√°p URI) ===
async def send_message(ext: str):
    """G·ª≠i tin nh·∫Øn SIP v·ªõi URI h·ª£p l·ªá."""
    try:
        response = await manager.send_action({
            'Action': 'MessageSend',
            'To': f'pjsip:{ext}',
            # URI SIP h·ª£p l·ªá, kh·ªõp v·ªõi logic ƒë√£ s·ª≠a trong extensions.ael
            'From': 'sip:alert-system@127.0.0.1', 
            'Body': ALERT_MESSAGE
        })
        print(f"[üì® SMS] ‚Üí {ext} | Status: {response.get('Response')} - {response.get('Message')}")
    except Exception as e:
        print(f"[üì® SMS] ‚Üí {ext} | ‚ùå Error: {e}")

# === Handle One Extension (Both Tasks in Parallel) ===
async def handle_extension(ext: str):
    print(f"--- K√≠ch ho·∫°t c·∫£nh b√°o cho {ext} ---")
    await asyncio.gather(
        originate_call(ext),
        send_message(ext)
    )

# === Entry Point ===
async def main():
    await manager.connect()
    print("AMI Connected. Sending alerts...")

    # Ch·∫°y ƒë·ªìng th·ªùi c·∫£nh b√°o cho t·∫•t c·∫£ 4 Extension
    await asyncio.gather(*(handle_extension(ext) for ext in EXTENSIONS))

    await asyncio.sleep(2)
    manager.close()
    print("Alerts sent. AMI Disconnected.")

if __name__ == '__main__':
    asyncio.run(main())
