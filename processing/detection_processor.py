import cv2
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

from fall.fall_detector import FallDetector
from comm.ami_trigger import AMITrigger
from comm.telegram_bot import TelegramBot
from database.database_manager import insert_fall_event
from utils.draw_utils import draw_bounding_box, draw_skeleton


class DetectionProcessor:
    def __init__(self, ami_trigger: AMITrigger, telegram_bot: Optional[TelegramBot]):
        self.fall_detectors: Dict[str, FallDetector] = {}
        # L∆∞u tr·ªØ timestamp c·ªßa l·∫ßn c·∫£nh b√°o cu·ªëi c√πng cho t·ª´ng th·ª±c th·ªÉ
        self.last_alert_timestamps: Dict[str, datetime] = {}
        self.ami_trigger = ami_trigger
        self.telegram_bot = telegram_bot

    async def handle_camera_data(self, frame: np.ndarray, person_id: int, box: list, landmarks: list):
        """
        X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ lu·ªìng camera ƒë·ªÉ ph√°t hi·ªán t√© ng√£.
        M·ªói ng∆∞·ªùi ƒë∆∞·ª£c ph√°t hi·ªán c√≥ m·ªôt ID ri√™ng, v√≠ d·ª•: 'camera_0_person_1'.
        """
        entity_id = f"camera_person_{person_id}"
        
        # S·ª≠ d·ª•ng FallDetector ri√™ng cho m·ªói ƒë·ªëi t∆∞·ª£ng
        detector = self._get_fall_detector(entity_id)
        is_fall = detector.detect_fall(landmarks)

        # V·∫Ω h√¨nh ·∫£nh tr·ª±c quan tr√™n khung h√¨nh
        status = 'fall' if is_fall else 'normal'
        draw_bounding_box(frame, box, entity_id, status)
        draw_skeleton(frame, landmarks)
        
        # N·∫øu ph√°t hi·ªán t√© ng√£ v√† ƒë√£ h·∫øt th·ªùi gian ch·ªù
        if is_fall and self._should_alert(entity_id):
            fall_event = {
                "timestamp": datetime.now().timestamp(),
                "source": "camera",
                "entity_id": entity_id,
                "fall_detected": True,
                "latitude": 0,  # Kh√¥ng c√≥ GPS t·ª´ camera
                "longitude": 0,
                "has_gps_fix": False
            }
            fall_id = insert_fall_event(fall_event)
            alert_msg = f"‚ö†Ô∏è Fall detected by camera for {entity_id}. Event ID: {fall_id}"
            print(alert_msg)

            await self.ami_trigger.alert_devices(alert_msg)
            if self.telegram_bot:
                _, img_encoded = cv2.imencode('.jpg', frame)
                img_bytes = img_encoded.tobytes()
                await self.telegram_bot.send_photo(img_bytes, alert_msg)
            
            self._update_alert_status(entity_id)

    async def handle_mqtt_data(self, mqtt_msg: Dict[str, Any]):
        """
        X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ lu·ªìng MQTT ƒë∆∞·ª£c g·ª≠i b·ªüi thi·∫øt b·ªã ESP32.
        S·ª≠ d·ª•ng 'device_id' t·ª´ tin nh·∫Øn l√†m ID th·ª±c th·ªÉ.
        """
        entity_id = mqtt_msg.get('device_id')
        
        # Ki·ªÉm tra n·∫øu tin nh·∫Øn c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ x·ª≠ l√Ω
        if not entity_id or not mqtt_msg.get('fall_detected'):
            return

        # Ki·ªÉm tra th·ªùi gian ch·ªù ƒë·ªÉ tr√°nh g·ª≠i c·∫£nh b√°o l·∫∑p
        if self._should_alert(entity_id):
            fall_id = insert_fall_event({
                "timestamp": datetime.now().timestamp(),
                "source": "esp32",
                "entity_id": entity_id,
                "fall_detected": True,
                "latitude": mqtt_msg.get('latitude', 0),
                "longitude": mqtt_msg.get('longitude', 0),
                "has_gps_fix": mqtt_msg.get('has_gps_fix', False)
            })

            gps_info = f"{mqtt_msg.get('latitude', 'Unknown')}, {mqtt_msg.get('longitude', 'Unknown')}"
            alert_msg = f"üö® Fall detected by {entity_id} at GPS: {gps_info}. Event ID: {fall_id}"
            print(alert_msg)
            
            await self.ami_trigger.alert_devices(alert_msg)
            if self.telegram_bot:
                await self.telegram_bot.send_message(alert_msg)

            self._update_alert_status(entity_id)
    
    def _get_fall_detector(self, entity_id: str) -> FallDetector:
        """Helper function to get or create a FallDetector instance for an entity."""
        if entity_id not in self.fall_detectors:
            self.fall_detectors[entity_id] = FallDetector()
        return self.fall_detectors[entity_id]

    def _should_alert(self, entity_id: str, cooldown_minutes: int = 5) -> bool:
        """
        Ki·ªÉm tra xem ƒë√£ h·∫øt th·ªùi gian ch·ªù ƒë·ªÉ g·ª≠i c·∫£nh b√°o m·ªõi hay ch∆∞a.
        Gi√∫p tr√°nh spam th√¥ng b√°o.
        """
        now = datetime.now()
        last_alert_time = self.last_alert_timestamps.get(entity_id)
        return last_alert_time is None or (now - last_alert_time) > timedelta(minutes=cooldown_minutes)

    def _update_alert_status(self, entity_id: str):
        """C·∫≠p nh·∫≠t th·ªùi gian c·∫£nh b√°o cu·ªëi c√πng cho m·ªôt th·ª±c th·ªÉ."""
        self.last_alert_timestamps[entity_id] = datetime.now()
